#!/usr/bin/php
<?php

$convert_bitrate = "";

function error($message) {
	echo "\n";
	echo $message;
	echo "\n";
	echo "\n";
	exit();
}
if (!$argv[1]) {
	error("Please specify a m3u playlist file to read from\n\nUsage:\n\n\tplaylist_sync playlist.m3u [options]\n\n  OPTIONS:\n\n\t -c bitrate : Bitrate to convert audio to, default no conversion.");
}

$playlist = $argv[1];
if ($argv[2] == "-c") {
	$convert_bitrate = $argv[3];
	if (!is_sumeric($convert_bitrate)) {
		error("Invalid conversion bitrate specificied, try -h");
	}
}

if ($argv[1] == "-h") {
	error("Usage:\n\n\tplaylist_sync playlist.m3u [options]\n\n  OPTIONS:\n\n\t -c bitrate : Bitrate to convert audio to, default no conversion.");
}

echo "\n";
echo "Reading first entry from Playlist file";
echo "\n";

$handle = fopen($playlist,"r");
if (!$handle) {
	error("Could not open playlist file");	
}

$contents = file_get_contents($playlist);

$contents = explode("",$contents);

for($i=0;$i<count($contents);$i++) {
	$line = $contents[$i];
	if (substr($line,0,strlen("#EXT")) != "#EXT" && strlen($line) > 2) {
		$tracks[] = $line;
	}
}

$library_path = getLibraryPath($tracks);
if ($library_path == undef) {
	error("Could not figure out library path, is this an iTunes music collection!");
} 
$library_path .= "/";
echo "\nGot library path of $library_path\n";

$memory_key = getMemoryKey() . "/";
echo "\nDestination $memory_key\n";

for ($i=0;$i<count($tracks);$i++) {
	$input_path = $tracks[$i];
	$output_path = str_replace($library_path,$memory_key,$input_path);
	
	if (substr($input_path,-4) != ".mp3" && substr($input_path,-4) != ".m4a") {
		conintue;
	}
	
	if (substr($output_path,-4) == ".m4a") {
		$output_path = substr($output_path,0,-4) . ".mp3";
	}
	
	if (file_exists($output_path) && filesize($output_path) > 0) {
		continue;
	}

	makeDirectoryStructure($memory_key,$output_path);
	if (is_numeric($convert_bitrate) {
		$bitrate = getBitRate($input_path);
		if ($bitrate > ($convert_bitrate + 32)) {
			echo "Converting $input_path\n";
			convertAndCopy($input_path, $output_path);
		} else {
			echo "Copying $input_path\n";
			@copy($input_path,$output_path);
		}
	} else {
		echo "Copying $input_path\n";
		@copy($input_path,$output_path);
	}
}

function convertAndCopy($input_path, $output_path) {
	global $convert_bitrate;
	$ret = system('./ffmpeg -i "' . $input_path .'" -ab ' . $convert_bitrate .' "' . $output_path . '" 2>/dev/null');
}

function makeDirectoryStructure($memory_key,$output_path) {
	$output_path = str_replace($memory_key,"",$output_path);
	$memory_key = substr($memory_key,0,strlen($memory_key)-1);
	$parts = explode("/",$output_path);
	$base_path = $memory_key;
	for ($i=0;$i<count($parts)-1;$i++) {
		$base_path = $base_path . "/" . $parts[$i];
		@mkdir($base_path);
	}
}

function getBitRate($path) {
	@unlink('out.tmp');
	$ret = system('./ffprobe "' . $path . '" 2> out.tmp');
	$ret = file_get_contents('out.tmp');
	$lines = explode("\n",$ret);
	for($i=0;$i<count($lines);$i++) {
		$parts = explode("bitrate: ",$lines[$i]);
		if ($parts[1]) {
			$bit = trim($parts[1]);
			$bit = str_replace('kb/s',"",$bit);
			return trim($bit);
		}
	}
}


function getMemoryKey() {
	$ret = system('df -h | grep Volumes > out.tmp');
	$ret = file_get_contents('out.tmp');
	$parts = explode("\n",$ret);
	for($i=0;$i<count($parts);$i++) {
		$new = explode("/Volumes/",$parts[$i]);
		if ($new[1] != "") {
			$options[] = $new[1];
		}
	}
	echo "\nPlease select a destination for your music: \n\n";
	for ($i=0;$i<count($options);$i++) {
		$to_select = $i + 1;
		echo "   $to_select : $options[$i]\n";
	} 
	
	$total = count($options);
	echo "\n\nEnter an option between 1 and $total:\n";
	$handle = fopen ("php://stdin","r");
	$line = fgets($handle);
	$selected = $line - 1;
	if(!$options[$selected]){
		error("Failed to recongise input");
	}
	return "/Volumes/" . $options[$selected];	
}

function getLibraryPath($tracks) {
	$path = $tracks[0];
	if (!file_exists($path)) {
		error("Could not find the first track $path, FATAL ERROR");
	}
	$parts = explode("/",$path);
	$count = count($parts);
	for ($i=$count-1;$i>0;$i--) {
		$common_path = "";
		for ($j=0;$j<$i;$j++) {
			if ($parts[$j] != "") {
				$common_path .= "/" . $parts[$j];
			}
		}
		$path_count = checkPath($common_path,$tracks);
		if ($path_count == count($tracks)) {
			return $common_path;
		}
	} 
	return undef;
}

function checkPath($common_path,$tracks) {
	$total = 0;
	for($i=0;$i<count($tracks);$i++) {
		if (substr($tracks[$i],0,strlen($common_path)) == $common_path) {
			$total++;
		}
	}
	return $total;
}

?>
